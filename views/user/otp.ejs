<%-include('./userLayout/header')%>
    <style>
        body {
            background-color: #f3e0e2;
        }

        .no-hover {
            pointer-events: none;
        }
    </style>
    <div class="center-div text-center">
        <div class="container rounded w-25 signOuter">
            <h5 class="text-dark mt-5 mb-5">OTP Verification</h5>
            <% if(locals.emailAlert){ %>
                <h7 class="text-dark mt-1 mb-1">OTP send to</h7><br><small> <%= emailAlert %></small><br>
                
                <% } %>
                    <%if(locals.signupAlert){%>
                        <div class="alert alert-danger text-center" id="signupAlert" role="alert">
                            <%=(locals.signupAlert)%>
                        </div>
                        <%}%>

                            <!-- <form action="/otpSignup" method="post"> -->
                                <input type="text" placeholder="OTP" name="otp" id="otpInput" class="form-control " /><br>
                                <small id="otpError" style="color: red;"></small><br>
                                <div id="otpTimer"></div>
                                
                                <button type="button" style="display:none ;" class="btn-signup mb-4" id="otpButton"
                                    onclick="resendOTP()">Resend OTP</button>
                                <button type="submit" class="btn-signup mb-4" id="signupButton" onclick="sendOTP()">Submit</button>
                            <!-- </form> -->
        </div>
    </div>
    <script>
            startOtpTimer();
        
        // Function to start the countdown timer

        function startOtpTimer() {
            let timer = 10; // OTP validity 
            const otpTimer = document.getElementById('otpTimer');

            const countdown = setInterval(() => {
                const seconds = timer;
                otpTimer.textContent = `OTP valid for:  ${seconds}s`;

                if (timer <= 0) {
                    clearInterval(countdown);
                    otpTimer.textContent = 'OTP expired';
                    // document.getElementById('otpButton').textContent = 'Resend OTP';
                    // document.getElementById('otpButton').disabled = false;    //to re enable the button
                    // document.getElementById('otpButton').classList.remove('no-hover');   //to regain hover effect
                    document.getElementById('otpButton').style.display = 'inline-block';
                }

                timer--;
            }, 1000);
        }
    // document.getElementById('otpButton').textContent = 'Resend OTP';    //changing the text content of the otpButton    
    </script>

    <script>
       function sendOTP(){
    const OTP = document.getElementById('otpInput').value;
    
    fetch(`/otpSignup?otp=${OTP}`, {
        method: 'POST'
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        return response.json(); 
    })
    .then(data => {
        
        if (data.message === "success") {
            window.location.href = "/";
        } else if(data.message === "failed") {
           const otpError = document.getElementById('otpError')
           otpError.textContent = "Invalid OTP"
        }
    })
    .catch(error => {
        console.error('Fetch Error:', error);
        
    });
}

            
            
            
    
    </script>
    
    <script>
        function resendOTP() {
            // Add logic for triggering OTP resend here
            // For example, make a fetch request to the server's endpoint
            fetch('/resendOtp', {
                method: 'GET',
                // You can pass additional data if needed
                // body: JSON.stringify({ email: 'user@example.com' }),
            })
                .then(response => {
                    if (response.ok) {
                        // Start the timer only if the request is successful
                        location.reload();
                        return response.json();
                    } else {
                        // Handle errors, e.g., display an error message
                        console.error('Error triggering OTP resend:', response.statusText);
                        return Promise.reject('Error triggering OTP resend');
                    }
                })
                .then(data => {
                    // You can handle the response data if needed
                    console.log(data);
                    // Restart the timer after the OTP is resent
                    // startOtpTimer(10);
                    // startResendTimer(60);
                })
                .catch(error => {
                    // Handle unexpected errors
                    console.error('Error:', error);
                });
        }
    </script>
    <script>
        // Function to hide the alert message after 3 seconds
        setTimeout(() => {
            document.getElementById("signupAlert").style.display = "none";
        }, 2000);

       

    </script>


<script>

    let isOtpMatched = null
    console.log(isOtpMatched)


    async function gfjf(){
      try {
        const gmail = document.getElementById("Email").value
        const response= await fetch(`/sendotp?email=${gmail}`,{
            method: "GET",

        })
        if(!response.ok){
            throw new Error("Internal server error")
        }
        const data = await response.json()
        console.log(data);
        const button = document.getElementById("time")
        button.disabled = true;
        let count = 60;

        const countdown = setInterval(()=>{
            if(count > 0) {
                button.textContent = `${count}`;
                button.classList.add("bg-warning");
                count --;
            }else{
                clearInterval(countdown);
                button.textContent ="Resend Otp"
                button.disabled = false;
            }
        },1000)
        const otpBox= document.getElementById("otpBox")
        otpBox.focus();

        

        otpBox.addEventListener("input", async()=>{
            if(otpBox.value.length === 4){
                const otpResponse = await fetch(`/verifyotp?otp=${otpBox.value}`,{
                    method : "GET",
                })
                if(!otpResponse.ok){
                    throw new Error("otp validation error")
                }
                const otpData = await otpResponse.json();
                if(otpData=="otp Matched"){
                    clearInterval(countdown);
                    button.textContent= "";
                    button.textContent = "verified"
                    button.disabled= "true"
                    button.classList.remove("bg-warning")
                    button.classList.add("bg-primary")
                    isOtpMatched = true
                

                    setTimeout(()=>{
                        isOtpMatched =null;
                        
                    },90000)
                    
                }else if(otpData=="otp doesnot matched"){
                    clearInterval(countdown);
                    button.textContent = "invalid OTP"
                    button.classList.remove("bg-warning");
                    button.classList.add("bg-red")
                    isOtpMatched= false
                    setTimeout(()=>{
                        button.textContent = " Resend otp"
                        button.disabled =false;

                    },7000)
                    
                }
            }
        })





      } catch (error) {

        console.log(error.message)
      
        
      }


    }
    </script>


    <%-include('./userLayout/footer')%>